generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model School {
  id             Int       @id @default(autoincrement())
  name           String
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  creationUserId Int?
  updatedAt      DateTime? @updatedAt
  updateUserId   Int?
  users          User[]
}

model User {
  id             Int        @id @default(autoincrement())
  username       String     
  password       String
  name           String
  email          String     
  cellphone      String
  isDeleted      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  creationUserId Int?
  updatedAt      DateTime?  @updatedAt
  updateUserId   Int?
  schoolId       Int
  professor      Professor?
  secretary      Secretary?
  school         School     @relation(fields: [schoolId], references: [id])

  @@index([schoolId], map: "User_schoolId_fkey")
}

model Secretary {
  id             Int       @id @default(autoincrement())
  code           String    
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  creationUserId Int?
  updatedAt      DateTime? @updatedAt
  updateUserId   Int?
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
}

model Professor {
  id             Int              @id @default(autoincrement())
  code           String           
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  creationUserId Int?
  updatedAt      DateTime?        @updatedAt
  updateUserId   Int?
  gradeId        Int
  userId         Int              @unique
  constancies    Constancy[]
  procedures     Procedure[]
  grade          Grade            @relation(fields: [gradeId], references: [id])
  user           User             @relation(fields: [userId], references: [id])
  theses         ProfessorTesis[]

  @@index([gradeId], map: "Professor_gradeId_fkey")
}

model Grade {
  id             Int         @id @default(autoincrement())
  name           String
  abbreviation   String
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  creationUserId Int?
  updatedAt      DateTime?   @updatedAt
  updateUserId   Int?
  professors     Professor[]
}

model Thesis {
  id                Int               @id @default(autoincrement())
  name              String
  resolutionCode    String
  date              DateTime?
  firstStudentName  String
  secondStudentName String
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  creationUserId    Int?
  updatedAt         DateTime?         @updatedAt
  updateUserId      Int?
  typeId            Int
  constancyThesis   ConstancyThesis[]
  professorsThesis  ProfessorTesis[]
  type              ThesisType        @relation(fields: [typeId], references: [id])

  @@index([typeId], map: "Thesis_typeId_fkey")
}

model ProfessorTesis {
  id             Int       @id @default(autoincrement())
  professorId    Int
  thesisId       Int
  chargeId       Int
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  creationUserId Int?
  updatedAt      DateTime? @updatedAt
  updateUserId   Int?
  charge         Charge    @relation(fields: [chargeId], references: [id])
  professor      Professor @relation(fields: [professorId], references: [id])
  thesis         Thesis    @relation(fields: [thesisId], references: [id])

  @@index([chargeId], map: "ProfessorTesis_chargeId_fkey")
  @@index([professorId], map: "ProfessorTesis_professorId_fkey")
  @@index([thesisId], map: "ProfessorTesis_thesisId_fkey")
}

model Charge {
  id               Int              @id @default(autoincrement())
  name             String
  isDeleted        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  creationUserId   Int?
  updatedAt        DateTime?        @updatedAt
  updateUserId     Int?
  professorsThesis ProfessorTesis[]
}

model ThesisType {
  id             Int       @id @default(autoincrement())
  name           String    
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  creationUserId Int?
  updatedAt      DateTime? @updatedAt
  updateUserId   Int?
  theses         Thesis[]
}

model Procedure {
  id             Int           @id @default(autoincrement())
  endDate        DateTime?
  isDeleted      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  creationUserId Int?
  updatedAt      DateTime?     @updatedAt
  updateUserId   Int?
  professorId    Int
  typeId         Int
  stateId        Int
  constancyId    Int?          @unique
  amount         Int
  chargeIds      String?
  startDate      DateTime?
  thesisTypeIds  String?
  constancy      Constancy?    @relation(fields: [constancyId], references: [id])
  professor      Professor     @relation(fields: [professorId], references: [id])
  state          State         @relation(fields: [stateId], references: [id])
  type           ProcedureType @relation(fields: [typeId], references: [id])

  @@index([professorId], map: "Procedure_professorId_fkey")
  @@index([stateId], map: "Procedure_stateId_fkey")
  @@index([typeId], map: "Procedure_typeId_fkey")
}

model ProcedureType {
  id             Int         @id @default(autoincrement())
  name           String
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  creationUserId Int?
  updatedAt      DateTime?   @updatedAt
  updateUserId   Int?
  procedures     Procedure[]
}

model State {
  id             Int         @id @default(autoincrement())
  name           String
  isDeleted      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  creationUserId Int?
  updatedAt      DateTime?   @updatedAt
  updateUserId   Int?
  procedures     Procedure[]
}

model Constancy {
  id                 Int               @id @default(autoincrement())
  registrationNumber String            
  fileNumber         String
  date               DateTime
  isDeleted          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  creationUserId     Int?
  updatedAt          DateTime?         @updatedAt
  updateUserId       Int?
  professorId        Int
  procedureId        Int?
  professor          Professor         @relation(fields: [professorId], references: [id])
  constancyThesis    ConstancyThesis[]
  procedure          Procedure?

  @@index([professorId], map: "Constancy_professorId_fkey")
}

model ConstancyThesis {
  constancyId    Int
  thesisId       Int
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  creationUserId Int?
  updatedAt      DateTime? @updatedAt
  updateUserId   Int?
  constancy      Constancy @relation(fields: [constancyId], references: [id])
  thesis         Thesis    @relation(fields: [thesisId], references: [id])

  @@id([constancyId, thesisId])
  @@index([thesisId], map: "ConstancyThesis_thesisId_fkey")
}
